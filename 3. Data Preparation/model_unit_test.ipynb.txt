{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wyoN9Zvp252l"
      },
      "source": [
        "This is the Model module"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qCFJyMUs252n"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.experimental import enable_iterative_imputer\n",
        "from sklearn.impute import IterativeImputer\n",
        "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
        "from sklearn.svm import SVR\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iFhzHNWU252p"
      },
      "outputs": [],
      "source": [
        "train_df = pd.read_csv(\"./imputed_budget_train.csv\")\n",
        "test_df = pd.read_csv(\"./imputed_budget_test.csv\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1vVZEELG252p"
      },
      "outputs": [],
      "source": [
        "X_vars = ['Runtime', 'Genre Cluster', 'G', 'NC-17', 'NR', 'PG', 'PG-13', 'R', 'Holiday', 'Adj Merged Budget', 'Has Star Score', 'Has Director Score', 'Has Production Company Score', 'Has Domestic Distributor Score', 'Unweighted Star Score_normalized', 'Simple Weight Star Score_normalized', 'Log Weight Star Score_normalized', 'Exponential Weight Star Score_normalized', 'Total Director Score_normalized', 'Avg Director Score_normalized', 'Total Production Company Score_normalized', 'Avg Production Company Score_normalized', 'Domestic Distributor Score_normalized', 'Season_ASO_4', 'Season_FMA_2', 'Season_MJJ_3', 'Season_NDJ_1']\n",
        "y = [\"Adj Merged Revenue\"]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "of31Wgdf252q"
      },
      "outputs": [],
      "source": [
        "train_X = train_df[X_vars]\n",
        "train_y = train_df[y]\n",
        "test_X = train_df[X_vars]\n",
        "test_y = train_df[y]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5I2VCaPQ252q"
      },
      "source": [
        "We decided to use the iterative importer with a random forrest regressor"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ON6zaSTF252q"
      },
      "outputs": [],
      "source": [
        "imp = IterativeImputer(min_value=0, max_iter=1000, random_state=102, estimator=RandomForestRegressor())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JcrCJjY8252q"
      },
      "source": [
        "Now to build the pipeline, we need the type of models we want to try."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 3: Building the Pipeline\n",
        "# Assuming train_X and train_y are your training features and target variable\n",
        "# Convert train_y to a 1D array\n",
        "train_y = np.ravel(train_y)\n",
        "\n",
        "pipeline = Pipeline([\n",
        "    ('imputer', imp),\n",
        "    ('regressor', RandomForestRegressor())  # RandomForestRegressor without grid search\n",
        "])\n",
        "\n",
        "# Train the RandomForestRegressor\n",
        "pipeline.fit(train_X, train_y)\n",
        "\n",
        "# Get the trained model\n",
        "trained_model = pipeline.named_steps['regressor']\n"
      ],
      "metadata": {
        "id": "F3HNrt694w2M"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Assuming you have test_X as your test features\n",
        "# Make predictions using the trained model\n",
        "predictions = pipeline.predict(test_X)\n",
        "\n",
        "# Now you can use these predictions for further analysis or evaluation\n",
        "# For instance, if you have test_y (actual target values), you can evaluate the model performance\n",
        "# For example, using metrics like mean squared error (MSE) or R-squared\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "\n",
        "# Assuming test_y is your actual target variable for the test data\n",
        "# Evaluate the model\n",
        "mse = mean_squared_error(test_y, predictions)\n",
        "r_squared = r2_score(test_y, predictions)\n",
        "\n",
        "print(\"Mean Squared Error (MSE):\", mse)\n",
        "print(\"R-squared:\", r_squared)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IOzikfM86Gxf",
        "outputId": "6caf0291-100c-4043-e8fa-67305e324ef0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Squared Error (MSE): 33911004920939.465\n",
            "R-squared: 0.9521638151152054\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.4"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}